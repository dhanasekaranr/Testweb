# Theme Library: High-Tech, Professional SCSS Architecture

Organize your `@lib/theme` project for crystal-clear, scalable, and maintainable styling.

```
projects/theme/
├── src/lib/theme/
│   ├── tokens/                   # Design tokens (colors, spacing, typography)
│   │   ├── _colors.scss
│   │   ├── _spacing.scss
│   │   └── _typography.scss
│   │
│   ├── responsive/               # Breakpoints & responsive utilities
│   │   └── _responsive.scss
│   │
│   ├── overrides/                # Per-component Material 3 overrides
│   │   ├── button/               # M3 Button overrides
│   │   │   └── _button.scss
│   │   ├── form-field/           # M3 Form Field overrides
│   │   │   └── _form-field.scss
│   │   ├── input/                # M3 Input overrides
│   │   │   └── _input.scss
│   │   └── ...                   # other component folders
│   │
│   ├── mixins/                   # Custom layout & utility mixins
│   │   ├── _layout.scss
│   │   └── _utils.scss
│   │
│   ├── index.scss                # Public SCSS API (for @use)
│   └── theme.scss                # Master SCSS entry for Sass→CSS build
├── ng-package.json               # ng-packagr config
├── package.json                  # library build scripts
└── README.md                     # Documentation for tokens, mixins, overrides
```

---

## 1. tokens/_colors.scss
```scss
// Color palette maps
$color-primary:   #005FCC;
$color-secondary: #FF6F00;
$color-accent:    #00BFA5;
$color-warn:      #E91E63;

$theme-light: (
  primary:   $color-primary,
  secondary: $color-secondary,
  accent:    $color-accent,
  warn:      $color-warn,
  background: (default: #FAFAFA, card: #FFFFFF),
);

$theme-dark: (
  primary:   #90CAF9,
  secondary: #FFAB40,
  accent:    #80CBC4,
  warn:      #F48FB1,
  background: (default: #303030, card: #424242),
);
```  

## 2. responsive/_responsive.scss
```scss
$breakpoints: (
  xs: 0,
  sm: 600px,
  md: 960px,
  lg: 1280px,
  xl: 1920px
);

@function bp($alias) {
  @return map-get($breakpoints, $alias);
}

@mixin respond-to($alias) {
  @media (min-width: bp($alias)) {
    @content;
  }
}
```  

## 3. overrides/button/_button.scss
```scss
@use '@angular/material' as mat;
@use 'theme/tokens/colors' as colors;
@use 'theme/mixins/utils' as utils;

// Example: Override M3 button radius & padding
a .mat-button {
  border-radius: utils.scale-spacing(xs);
  padding: utils.scale-spacing(sm) utils.scale-spacing(md);
  text-transform: none;
}
```  

## 4. mixins/_layout.scss
```scss
@use 'theme/responsive';
@use 'theme/tokens/spacing';

@mixin container($max-width: bp(md)) {
  width: 100%;
  padding: 0 map-get($spacing-scale, md);
  margin: 0 auto;
  @include respond-to(lg) {
    max-width: $max-width;
  }
}
```  

## 5. index.scss (Public SCSS API)
```scss
// Forward tokens & utilities
@forward 'tokens/colors';
@forward 'tokens/spacing';
@forward 'tokens/typography';
@forward 'responsive/_responsive';
@forward 'mixins/_layout';
@forward 'mixins/_utils';
@forward 'overrides/button/_button';
@forward 'overrides/form-field/_form-field';
@forward 'overrides/input/_input';
// ... other overrides

// Theme mixin that apps can include
@use '@angular/material' as mat;

$primary-palette: mat.define-palette(mat.$indigo-palette, 500);
$accent-palette:  mat.define-palette(mat.$teal-palette, 200);
$light-theme:    mat.define-light-theme((
  color: (primary: $primary-palette, accent: $accent-palette)
));

@mixin define-theme {
  // Core Material styles
  @include mat.all-component-themes($light-theme);
  // Include per-component overrides
  @include button-override;
  @include form-field-override;
  @include input-override;
  // ... other overrides
}
```  

## 6. theme.scss (Sass→CSS entry)
```scss
@use './index' as *;
@include define-theme;
```  

## 7. package.json (Library build)
```jsonc
{
  "name": "@your-scope/theme",
  "version": "1.0.0",
  "scripts": {
    "build:ng": "ng build theme --configuration production",
    "build:styles": "sass --no-source-map projects/theme/src/lib/theme/theme.scss dist/theme/bundles/theme.css --style=compressed",
    "build": "npm run build:ng && npm run build:styles"
  },
  "peerDependencies": {
    "@angular/core": "^19.0.0",
    "@angular/material": "^19.0.0"
  },
  "devDependencies": {
    "sass": "^1.62.0"
  }
}
```  

## 8. ng-package.json
```jsonc
{
  "$schema": "../../../node_modules/ng-packagr/ng-package.schema.json",
  "dest": "../../../dist/theme",
  "lib": { "entryFile": "src/public-api.ts" },
  "assets": ["bundles/theme.css"],
  "styleIncludePaths": ["src/lib/theme"]
}
```  

---

# App Integration: projects/app1/

### angular.json (styles)
```jsonc
"styles": [
  "node_modules/@your-scope/theme/bundles/theme.css",
  "src/styles.scss"
]
```

### scripts in root package.json
```jsonc
"scripts": {
  "build:theme": "npm --workspace @your-scope/theme run build",
  "watch:theme": "npm --workspace @your-scope/theme run build:styles -- --watch",
  "start:app1": "npm-run-all --parallel watch:theme ng:serve:app1",
  "ng:serve:app1": "ng serve app1"
}
```

### src/styles.scss in App
```scss
@import '~@your-scope/theme/bundles/theme.css';
// Your app-specific styles below
```

