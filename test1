// ============================================================================
// BookingModule End-to-End (Auto & RV)
// .NET 8/9 Web API + Dapper, Strategy + Factory, Keyed DI via Attribute Scan,
// Keyset pagination (afterId), single DB connection per request.
// ----------------------------------------------------------------------------
// Folder Structure
// ----------------------------------------------------------------------------
// /src
//   /Api
//     Api.csproj
//     appsettings.json
//     Program.cs
//     /Controllers
//       BookingsController.cs
//     /Composition
//       ServiceCollectionExtensions.cs
//     /Data
//       IDbConnectionFactory.cs
//       SqlConnectionFactory.cs
//     /Bookings
//       IBooking.cs
//       BookingTypeKeys.cs
//       /Dtos
//         AutoDto.cs
//         RvDto.cs
//       /Providers
//         IBookingProvider.cs
//         BaseBookingProvider.cs
//         /Attributes
//           BookingProviderKeyAttribute.cs
//         AutoProvider.cs
//         RvProvider.cs
//     /Services
//       IBookingProviderFactory.cs
//       BookingProviderFactory.cs
//       IBookingService.cs
//       BookingService.cs
// ----------------------------------------------------------------------------
// Quick test URLs (once running):
//   GET  /api/bookings/auto/123
//   GET  /api/bookings/auto?vinOrHin=1HG&make=Honda&take=50&afterId=200
//   GET  /api/bookings/rv?vinOrHin=4X4&year=2022&take=25
// ============================================================================

// ============================================================================
// File: src/Api/Program.cs
// ============================================================================
using Api.Composition;
using Api.Bookings.Providers; // for assembly reference

var builder = WebApplication.CreateBuilder(args);

builder.Services.AddControllers();

// One-liner: registers DB factory, services, factory, and all providers discovered
// in the assembly that contains AutoProvider (and friends).
builder.Services.AddBookingModule(typeof(AutoProvider).Assembly);

var app = builder.Build();

app.MapControllers();

app.Run();

// ============================================================================
// File: src/Api/appsettings.json
// ============================================================================
/*
{
  "ConnectionStrings": {
    "Default": "Server=.;Database=BookingsDb;Trusted_Connection=True;TrustServerCertificate=True;Max Pool Size=200;Min Pool Size=20"
  },
  "Logging": { "LogLevel": { "Default": "Information", "Microsoft.AspNetCore": "Warning" } },
  "AllowedHosts": "*"
}
*/

// ============================================================================
// File: src/Api/Api.csproj
// ============================================================================
/*
<Project Sdk="Microsoft.NET.Sdk.Web">
  <PropertyGroup>
    <TargetFramework>net9.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
  </PropertyGroup>
  <ItemGroup>
    <PackageReference Include="Dapper" Version="2.1.35" />
    <PackageReference Include="Microsoft.Data.SqlClient" Version="5.2.1" />
  </ItemGroup>
</Project>
*/

// ============================================================================
// File: src/Api/Controllers/BookingsController.cs
// ============================================================================
using Api.Services;
using Microsoft.AspNetCore.Mvc;

namespace Api.Controllers;

[ApiController]
[Route("api/bookings/{typeKey}")]
public sealed class BookingsController : ControllerBase
{
    private readonly IBookingService _svc;
    public BookingsController(IBookingService svc) => _svc = svc;

    // GET api/bookings/{typeKey}/{id}
    [HttpGet("{id:long}")]
    public async Task<IActionResult> GetById(string typeKey, long id, CancellationToken ct)
    {
        var dto = await _svc.GetByIdAsync(typeKey, id, ct);
        return dto is null ? NotFound() : Ok(dto);
    }

    // GET api/bookings/{typeKey}?vinOrHin=&make=&model=&year=&take=&afterId=
    [HttpGet]
    public async Task<IActionResult> Search(
        string typeKey,
        [FromQuery] string? vinOrHin,
        [FromQuery] string? make,
        [FromQuery] string? model,
        [FromQuery] int? year,
        [FromQuery] int take = 50,
        [FromQuery] long? afterId = null,
        CancellationToken ct = default)
    {
        var list = await _svc.SearchAsync(typeKey, vinOrHin, make, model, year, take, afterId, ct);
        return Ok(list);
    }
}

// ============================================================================
// File: src/Api/Composition/ServiceCollectionExtensions.cs
// ============================================================================
using System.Reflection;
using Api.Bookings.Providers;
using Api.Data;
using Api.Services;
using Microsoft.Extensions.DependencyInjection;

namespace Api.Composition;

public static class ServiceCollectionExtensions
{
    public static IServiceCollection AddBookingModule(this IServiceCollection services, params Assembly[] assemblies)
    {
        // Infra
        services.AddSingleton<IDbConnectionFactory, SqlConnectionFactory>();
        services.AddScoped<IBookingService, BookingService>();
        services.AddScoped<IBookingProviderFactory, BookingProviderFactory>(); // uses keyed DI

        // Where to scan for providers
        var scan = (assemblies.Length > 0) ? assemblies : new[] { Assembly.GetExecutingAssembly() };

        // Discover provider types with [BookingProviderKey]
        var providerTypes = scan
            .SelectMany(a => a.DefinedTypes)
            .Where(t => !t.IsAbstract && typeof(IBookingProvider).IsAssignableFrom(t))
            .Select(t => new { Type = (Type)t, Attr = t.GetCustomAttribute<BookingProviderKeyAttribute>() })
            .ToList();

        if (providerTypes.Any(x => x.Attr is null))
        {
            var missing = string.Join(", ", providerTypes.Where(x => x.Attr is null).Select(x => x.Type.Name));
            throw new InvalidOperationException($"All IBookingProvider implementations must have [BookingProviderKey]. Missing: {missing}");
        }

        // Guard duplicates
        var dupKeys = providerTypes
            .GroupBy(x => x.Attr!.Key, StringComparer.OrdinalIgnoreCase)
            .Where(g => g.Count() > 1)
            .Select(g => g.Key)
            .ToArray();
        if (dupKeys.Length > 0) throw new InvalidOperationException($"Duplicate booking provider keys: {string.Join(", ", dupKeys)}");

        // Register each provider as a keyed transient
        foreach (var x in providerTypes)
        {
            services.AddKeyedTransient(typeof(IBookingProvider), x.Attr!.Key, x.Type);
        }

        return services;
    }
}

// ============================================================================
// File: src/Api/Data/IDbConnectionFactory.cs
// ============================================================================
using System.Data;

namespace Api.Data;

public interface IDbConnectionFactory
{
    Task<IDbConnection> OpenAsync(CancellationToken ct = default);
}

// ============================================================================
// File: src/Api/Data/SqlConnectionFactory.cs
// ============================================================================
using System.Data;
using Microsoft.Data.SqlClient;
using Microsoft.Extensions.Configuration;

namespace Api.Data;

public sealed class SqlConnectionFactory : IDbConnectionFactory
{
    private readonly string _connStr;
    public SqlConnectionFactory(IConfiguration cfg)
    {
        _connStr = cfg.GetConnectionString("Default")
            ?? throw new InvalidOperationException("Missing connection string 'Default'.");
    }

    public async Task<IDbConnection> OpenAsync(CancellationToken ct = default)
    {
        var cn = new SqlConnection(_connStr); // pooling enabled by default
        await cn.OpenAsync(ct);
        return cn;
        }
}

// ============================================================================
// File: src/Api/Bookings/IBooking.cs
// ============================================================================
namespace Api.Bookings;

public interface IBooking
{
    string BookingType { get; }
}

// ============================================================================
// File: src/Api/Bookings/BookingTypeKeys.cs
// ============================================================================
namespace Api.Bookings;

public static class BookingTypeKeys
{
    public const string Auto = "auto";
    public const string Rv   = "rv";
}

// ============================================================================
// File: src/Api/Bookings/Dtos/AutoDto.cs
// ============================================================================
using Api.Bookings;

namespace Api.Bookings.Dtos;

public sealed class AutoDto : IBooking
{
    public string BookingType => BookingTypeKeys.Auto;
    public long   Id    { get; init; }
    public string Vin   { get; init; } = string.Empty;
    public string Make  { get; init; } = string.Empty;
    public string Model { get; init; } = string.Empty;
    public int    Year  { get; init; }
    public int    Doors { get; init; }
}

// ============================================================================
// File: src/Api/Bookings/Dtos/RvDto.cs
// ============================================================================
using Api.Bookings;

namespace Api.Bookings.Dtos;

public sealed class RvDto : IBooking
{
    public string BookingType => BookingTypeKeys.Rv;
    public long   Id       { get; init; }
    public string Vin      { get; init; } = string.Empty;
    public string Make     { get; init; } = string.Empty;
    public string Model    { get; init; } = string.Empty;
    public int    Year     { get; init; }
    public double LengthFt { get; init; }
}

// ============================================================================
// File: src/Api/Bookings/Providers/IBookingProvider.cs
// ============================================================================
using System.Data;

namespace Api.Bookings.Providers;

public interface IBookingProvider
{
    string Key { get; } // "auto", "rv", ...

    Task<IBooking?> GetByIdAsync(IDbConnection cn, long id, CancellationToken ct);

    // Keyset pagination: afterId instead of skip/offset
    Task<IReadOnlyList<IBooking>> SearchAsync(
        IDbConnection cn,
        string? vinOrHin,
        string? make,
        string? model,
        int? year,
        int take,
        long? afterId,
        CancellationToken ct);
}

// ============================================================================
// File: src/Api/Bookings/Providers/BaseBookingProvider.cs
// ============================================================================
using System.Data;
using Dapper;

namespace Api.Bookings.Providers;

public abstract class BaseBookingProvider : IBookingProvider
{
    public abstract string Key { get; }

    public abstract Task<IBooking?> GetByIdAsync(IDbConnection cn, long id, CancellationToken ct);

    public abstract Task<IReadOnlyList<IBooking>> SearchAsync(
        IDbConnection cn,
        string? vinOrHin,
        string? make,
        string? model,
        int? year,
        int take,
        long? afterId,
        CancellationToken ct);

    protected static string Like(string? s) => string.IsNullOrWhiteSpace(s) ? "%" : $"%{s.Trim()}%";

    protected static async Task<IReadOnlyList<T>> QAsync<T>(IDbConnection cn, string sql, object args, CancellationToken ct)
        => (await cn.QueryAsync<T>(new CommandDefinition(sql, args, cancellationToken: ct))).AsList();
}

// ============================================================================
// File: src/Api/Bookings/Providers/Attributes/BookingProviderKeyAttribute.cs
// ============================================================================
namespace Api.Bookings.Providers;

[AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = false)]
public sealed class BookingProviderKeyAttribute : Attribute
{
    public string Key { get; }
    public BookingProviderKeyAttribute(string key) => Key = key;
}

// ============================================================================
// File: src/Api/Bookings/Providers/AutoProvider.cs
// ============================================================================
using System.Data;
using Api.Bookings.Dtos;
using Dapper;

namespace Api.Bookings.Providers;

[BookingProviderKey(BookingTypeKeys.Auto)]
public sealed class AutoProvider : BaseBookingProvider
{
    public override string Key => BookingTypeKeys.Auto;

    public override async Task<IBooking?> GetByIdAsync(IDbConnection cn, long id, CancellationToken ct)
    {
        const string sql = @"SELECT Id, Vin, Make, Model, [Year], Doors
                              FROM dbo.Auto WHERE Id = @Id";
        return await cn.QuerySingleOrDefaultAsync<AutoDto>(new CommandDefinition(sql, new { Id = id }, cancellationToken: ct));
    }

    public override async Task<IReadOnlyList<IBooking>> SearchAsync(
        IDbConnection cn, string? vin, string? make, string? model, int? year, int take, long? afterId, CancellationToken ct)
    {
        const string sql = @"
SELECT TOP (@Take) Id, Vin, Make, Model, [Year], Doors
FROM dbo.Auto
WHERE (@AfterId IS NULL OR Id > @AfterId)
  AND (@Vin   IS NULL OR Vin   LIKE @VinLike)
  AND (@Make  IS NULL OR Make  LIKE @MakeLike)
  AND (@Model IS NULL OR Model LIKE @ModelLike)
  AND (@Year  IS NULL OR [Year]= @Year)
ORDER BY Id ASC;";

        var rows = await QAsync<AutoDto>(cn, sql, new {
            Take = Math.Clamp(take, 1, 200),
            AfterId = afterId,
            Vin = vin,   VinLike = Like(vin),
            Make = make, MakeLike = Like(make),
            Model = model, ModelLike = Like(model),
            Year = year
        }, ct);

        return rows.Cast<IBooking>().ToList();
    }
}

// ============================================================================
// File: src/Api/Bookings/Providers/RvProvider.cs
// ============================================================================
using System.Data;
using Api.Bookings.Dtos;
using Dapper;

namespace Api.Bookings.Providers;

[BookingProviderKey(BookingTypeKeys.Rv)]
public sealed class RvProvider : BaseBookingProvider
{
    public override string Key => BookingTypeKeys.Rv;

    public override async Task<IBooking?> GetByIdAsync(IDbConnection cn, long id, CancellationToken ct)
    {
        const string sql = @"SELECT Id, Vin, Make, Model, [Year], LengthFt
                              FROM dbo.Rv WHERE Id = @Id";
        return await cn.QuerySingleOrDefaultAsync<RvDto>(new CommandDefinition(sql, new { Id = id }, cancellationToken: ct));
    }

    public override async Task<IReadOnlyList<IBooking>> SearchAsync(
        IDbConnection cn, string? vin, string? make, string? model, int? year, int take, long? afterId, CancellationToken ct)
    {
        const string sql = @"
SELECT TOP (@Take) Id, Vin, Make, Model, [Year], LengthFt
FROM dbo.Rv
WHERE (@AfterId IS NULL OR Id > @AfterId)
  AND (@Vin   IS NULL OR Vin   LIKE @VinLike)
  AND (@Make  IS NULL OR Make  LIKE @MakeLike)
  AND (@Model IS NULL OR Model LIKE @ModelLike)
  AND (@Year  IS NULL OR [Year]= @Year)
ORDER BY Id ASC;";

        var rows = await QAsync<RvDto>(cn, sql, new {
            Take = Math.Clamp(take, 1, 200),
            AfterId = afterId,
            Vin = vin,   VinLike = Like(vin),
            Make = make, MakeLike = Like(make),
            Model = model, ModelLike = Like(model),
            Year = year
        }, ct);

        return rows.Cast<IBooking>().ToList();
    }
}

// ============================================================================
// File: src/Api/Services/IBookingProviderFactory.cs
// ============================================================================
using Api.Bookings.Providers;

namespace Api.Services;

public interface IBookingProviderFactory
{
    IBookingProvider Resolve(string typeKey);
}

// ============================================================================
// File: src/Api/Services/BookingProviderFactory.cs
// ============================================================================
using Api.Bookings.Providers;
using Microsoft.Extensions.DependencyInjection;

namespace Api.Services;

public sealed class BookingProviderFactory : IBookingProviderFactory
{
    private readonly IServiceProvider _sp;
    public BookingProviderFactory(IServiceProvider sp) => _sp = sp;

    public IBookingProvider Resolve(string typeKey)
        => _sp.GetRequiredKeyedService<IBookingProvider>(typeKey.ToLowerInvariant());
}

// ============================================================================
// File: src/Api/Services/IBookingService.cs
// ============================================================================
using Api.Bookings;

namespace Api.Services;

public interface IBookingService
{
    Task<IBooking?> GetByIdAsync(string typeKey, long id, CancellationToken ct);

    Task<IReadOnlyList<IBooking>> SearchAsync(
        string typeKey,
        string? vinOrHin,
        string? make,
        string? model,
        int? year,
        int take,
        long? afterId,
        CancellationToken ct);
}

// ============================================================================
// File: src/Api/Services/BookingService.cs
// ============================================================================
using Api.Bookings;
using Api.Bookings.Providers;
using Api.Data;

namespace Api.Services;

public sealed class BookingService : IBookingService
{
    private readonly IDbConnectionFactory _db;
    private readonly IBookingProviderFactory _factory;

    public BookingService(IDbConnectionFactory db, IBookingProviderFactory factory)
    {
        _db = db;
        _factory = factory;
    }

    public async Task<IBooking?> GetByIdAsync(string typeKey, long id, CancellationToken ct)
    {
        var provider = _factory.Resolve(typeKey);
        await using var cn = await _db.OpenAsync(ct);
        return await provider.GetByIdAsync(cn, id, ct);
    }

    public async Task<IReadOnlyList<IBooking>> SearchAsync(
        string typeKey, string? vinOrHin, string? make, string? model, int? year, int take, long? afterId, CancellationToken ct)
    {
        var provider = _factory.Resolve(typeKey);
        await using var cn = await _db.OpenAsync(ct);
        return await provider.SearchAsync(cn, vinOrHin, make, model, year, take, afterId, ct);
    }
}

// ============================================================================
// Notes:
// - Tables expected:
//   dbo.Auto(Id BIGINT PK, Vin NVARCHAR(..), Make NVARCHAR(..), Model NVARCHAR(..), [Year] INT, Doors INT, ...)
//   dbo.Rv  (Id BIGINT PK, Vin NVARCHAR(..), Make NVARCHAR(..), Model NVARCHAR(..), [Year] INT, LengthFt FLOAT, ...)
// - Ensure covering indexes for search patterns, e.g.:
//   CREATE INDEX IX_Auto_Vin ON dbo.Auto(Vin) INCLUDE (Make, Model, [Year], Id);
//   CREATE INDEX IX_Rv_Vin   ON dbo.Rv  (Vin) INCLUDE (Make, Model, [Year], Id);
// - Keyset paging uses afterId (cursor). Pass afterId=lastReturnedId to get next page.
// - Cancellation tokens are threaded end-to-end; ASP.NET sets RequestAborted automatically.
// - To add a new booking type (e.g., boat):
//     * Create BoatDto : IBooking
//     * Create BoatProvider : BaseBookingProvider, add [BookingProviderKey("boat")]
//     * No changes to controller, service, or Program.cs.
// ============================================================================
