// src/app/stores/store-factory.ts
import {
  signalStore,
  withState,
  signalStoreFeature,
  type SignalStoreFeature,
} from '@ngrx/signals';
import { withDevtoolsAuto } from '../devtools/with-devtools-auto.feature';

/** Overloads (add more if you truly need >8 dynamic features) */
export function createSignalFeatureStore<State extends object>(
  name: string,
  initial: State,
): unknown;
export function createSignalFeatureStore<State extends object>(
  name: string,
  initial: State,
  f1: SignalStoreFeature,
): unknown;
export function createSignalFeatureStore<State extends object>(
  name: string,
  initial: State,
  f1: SignalStoreFeature, f2: SignalStoreFeature,
): unknown;
export function createSignalFeatureStore<State extends object>(
  name: string,
  initial: State,
  f1: SignalStoreFeature, f2: SignalStoreFeature, f3: SignalStoreFeature,
): unknown;
export function createSignalFeatureStore<State extends object>(
  name: string,
  initial: State,
  f1: SignalStoreFeature, f2: SignalStoreFeature, f3: SignalStoreFeature, f4: SignalStoreFeature,
): unknown;
export function createSignalFeatureStore<State extends object>(
  name: string,
  initial: State,
  f1: SignalStoreFeature, f2: SignalStoreFeature, f3: SignalStoreFeature, f4: SignalStoreFeature, f5: SignalStoreFeature,
): unknown;
export function createSignalFeatureStore<State extends object>(
  name: string,
  initial: State,
  f1: SignalStoreFeature, f2: SignalStoreFeature, f3: SignalStoreFeature, f4: SignalStoreFeature, f5: SignalStoreFeature, f6: SignalStoreFeature,
): unknown;
export function createSignalFeatureStore<State extends object>(
  name: string,
  initial: State,
  f1: SignalStoreFeature, f2: SignalStoreFeature, f3: SignalStoreFeature, f4: SignalStoreFeature, f5: SignalStoreFeature, f6: SignalStoreFeature, f7: SignalStoreFeature,
): unknown;
export function createSignalFeatureStore<State extends object>(
  name: string,
  initial: State,
  f1: SignalStoreFeature, f2: SignalStoreFeature, f3: SignalStoreFeature, f4: SignalStoreFeature, f5: SignalStoreFeature, f6: SignalStoreFeature, f7: SignalStoreFeature, f8: SignalStoreFeature,
): unknown;

/** Implementation (no spreads into signalStore) */
export function createSignalFeatureStore<State extends object>(
  name: string,
  initial: State,
  ...rest: SignalStoreFeature[]
) {
  const base1 = withState(initial);
  const base2 = withDevtoolsAuto(name, initial);

  switch (rest.length) {
    case 0:
      return signalStore(
        { providedIn: 'root' },
        base1,
        base2,
      );

    case 1:
      return signalStore(
        { providedIn: 'root' },
        base1,
        base2,
        rest[0],
      );

    case 2:
      return signalStore(
        { providedIn: 'root' },
        base1,
        base2,
        rest[0],
        rest[1],
      );

    case 3:
      return signalStore(
        { providedIn: 'root' },
        base1,
        base2,
        rest[0],
        rest[1],
        rest[2],
      );

    case 4:
      return signalStore(
        { providedIn: 'root' },
        base1,
        base2,
        rest[0],
        rest[1],
        rest[2],
        rest[3],
      );

    case 5:
      return signalStore(
        { providedIn: 'root' },
        base1,
        base2,
        rest[0],
        rest[1],
        rest[2],
        rest[3],
        rest[4],
      );

    case 6:
      return signalStore(
        { providedIn: 'root' },
        base1,
        base2,
        rest[0],
        rest[1],
        rest[2],
        rest[3],
        rest[4],
        rest[5],
      );

    case 7:
      return signalStore(
        { providedIn: 'root' },
        base1,
        base2,
        rest[0],
        rest[1],
        rest[2],
        rest[3],
        rest[4],
        rest[5],
        rest[6],
      );

    default: {
      // 8+ optional features: compose them once, pass a single feature (no spread)
      const bundled = signalStoreFeature(
        rest[0], rest[1], rest[2], rest[3], rest[4], rest[5], rest[6], rest[7], // first 8 explicitly
        // if you *really* have more, add another case or extend the list above
      );
      return signalStore(
        { providedIn: 'root' },
        base1,
        base2,
        bundled,
      );
    }
  }
}
