## Project Structure

```
/src
  /Shared.LookupService
    Shared.LookupService.csproj
    /Models
      LookupDefinition.cs
      LookupItem.cs
    /Data
      MockDbContext.cs
      LookupDefinitionEntity.cs
      LoanStatusCategoryEntity.cs
      LoanStatusEntity.cs
    /Stores
      ILookupDefinitionStore.cs
      DbLookupDefinitionStore.cs
    /Providers
      ILookupProvider.cs
      ILookupHandler.cs
      TableLookupProvider.cs
      HandlerLookupProvider.cs
      ProductTypeLookupHandler.cs
    /Factory
      LookupProviderFactory.cs
    /Services
      ILookupDataService.cs
      LookupDataService.cs
      CachingLookupDataService.cs
    /Extensions
      ServiceCollectionExtensions.cs

  /LookupApi.Common
    LookupApi.Common.csproj
    Program.cs
    appsettings.json
    /Controllers
      LookupController.cs

  /FundingModuleApi
    FundingModuleApi.csproj
    Program.cs
    appsettings.json
    /Controllers
      FundingController.cs
```

---

# Shared.LookupService (Class Library)

### Shared.LookupService.csproj

```xml
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
  </PropertyGroup>
  <ItemGroup>
    <PackageReference Include="Microsoft.Extensions.Caching.Memory" Version="8.0.0" />
    <PackageReference Include="Dapper" Version="2.0.123" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.InMemory" Version="8.0.0" />
    <PackageReference Include="Microsoft.Data.SqlClient" Version="5.0.0" />
  </ItemGroup>
</Project>
```

### Models/LookupDefinition.cs

```csharp
namespace Shared.LookupService.Models;

/// <summary>
/// Defines a lookup and its source configuration.
/// Only one source property should be set based on <see cref="LookupSourceType"/>.
/// </summary>
public class LookupDefinition
{
    public string Key { get; set; } = null!;
    public LookupSourceType SourceType { get; set; }
    public string? TableName { get; set; }
    public string? Sql { get; set; }
    public string? EntityType { get; set; }
    public string? HandlerType { get; set; }
    public string[] FilterColumns { get; set; } = Array.Empty<string>();
    public string? SortBy { get; set; }
    public string? CodeColumn { get; set; }
    public string? DescColumn { get; set; }
    public string[] AdditionalColumns { get; set; } = Array.Empty<string>();
}

public enum LookupSourceType
{
    Table,
    Sql,
    Entity,
    Handler
}
```

### Models/LookupItem.cs

```csharp
namespace Shared.LookupService.Models;

public record LookupItem(
    string Code,
    string Description,
    IDictionary<string, object>? AdditionalData = null
);
```

---

## Data (Entities & DbContext)

### Data/LookupDefinitionEntity.cs

```csharp
namespace Shared.LookupService.Data;

public class LookupDefinitionEntity
{
    public string Key { get; set; } = null!;
    public string? TableName { get; set; }
    public string? Sql { get; set; }
    public string? EntityType { get; set; }
    public string? HandlerType { get; set; }
    public string FilterColumns { get; set; } = "[]";
    public string? SortBy { get; set; }
    public string? CodeColumn { get; set; }
    public string? DescColumn { get; set; }
    public string AdditionalColumns { get; set; } = "[]";
}
```

### Data/LoanStatusCategoryEntity.cs

```csharp
namespace Shared.LookupService.Data;

public class LoanStatusCategoryEntity
{
    public int Id { get; set; }
    public string Name { get; set; } = null!;
    public ICollection<LoanStatusEntity> LoanStatuses { get; set; } = new List<LoanStatusEntity>();
}
```

### Data/LoanStatusEntity.cs

```csharp
namespace Shared.LookupService.Data;

public class LoanStatusEntity
{
    public int Id { get; set; }
    public string Description { get; set; } = null!;
    public int LoanStatusCategoryId { get; set; }
    public LoanStatusCategoryEntity Category { get; set; } = null!;
}
```

### Data/MockDbContext.cs

```csharp
using Microsoft.EntityFrameworkCore;
using System.Text.Json;

namespace Shared.LookupService.Data;

public class MockDbContext : DbContext
{
    public MockDbContext(DbContextOptions<MockDbContext> options)
        : base(options)
    {
    }

    public DbSet<LookupDefinitionEntity> LookupDefinitions { get; set; }
    public DbSet<LoanStatusCategoryEntity> LoanStatusCategories { get; set; }
    public DbSet<LoanStatusEntity> LoanStatuses { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        // LookupDefinitions
        modelBuilder.Entity<LookupDefinitionEntity>(entity =>
        {
            entity.HasKey(e => e.Key);
            entity.Property(e => e.Key).HasMaxLength(100).IsRequired();
            entity.Property(e => e.TableName).HasMaxLength(100);
            entity.Property(e => e.Sql);
            entity.Property(e => e.EntityType).HasMaxLength(200);
            entity.Property(e => e.HandlerType).HasMaxLength(200);
            entity.Property(e => e.FilterColumns);
            entity.Property(e => e.SortBy).HasMaxLength(100);
            entity.Property(e => e.CodeColumn).HasMaxLength(100);
            entity.Property(e => e.DescColumn).HasMaxLength(100);
            entity.Property(e => e.AdditionalColumns);

            entity.HasData(
                new LookupDefinitionEntity {
                    Key = "Countries",
                    TableName = "RefCountries",
                    FilterColumns = JsonSerializer.Serialize(new[] { "IsActive" }),
                    SortBy = "CountryName",
                    CodeColumn = "CountryCode",
                    DescColumn = "CountryName",
                    AdditionalColumns = JsonSerializer.Serialize(Array.Empty<string>())
                },
                new LookupDefinitionEntity {
                    Key = "LoanStatusCategory",
                    TableName = "LoanStatusCategories",
                    SortBy = "Name",
                    CodeColumn = "Id",
                    DescColumn = "Name",
                    AdditionalColumns = JsonSerializer.Serialize(Array.Empty<string>())
                },
                new LookupDefinitionEntity {
                    Key = "LoanStatuses",
                    TableName = "LoanStatuses",
                    FilterColumns = JsonSerializer.Serialize(new[] { "LoanStatusCategoryId" }),
                    SortBy = "Description",
                    CodeColumn = "Id",
                    DescColumn = "Description",
                    AdditionalColumns = JsonSerializer.Serialize(Array.Empty<string>())
                }
            );
        });

        // LoanStatusCategory
        modelBuilder.Entity<LoanStatusCategoryEntity>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.Property(e => e.Name).HasMaxLength(100).IsRequired();
            entity.HasData(
                new LoanStatusCategoryEntity { Id = 1, Name = "Application" },
                new LoanStatusCategoryEntity { Id = 2, Name = "Approval" }
            );
        });

        // LoanStatus
        modelBuilder.Entity<LoanStatusEntity>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.Property(e => e.Description).HasMaxLength(200).IsRequired();
            entity.HasOne(e => e.Category)
                  .WithMany(c => c.LoanStatuses)
                  .HasForeignKey(e => e.LoanStatusCategoryId);
            entity.HasData(
                new LoanStatusEntity { Id = 1, Description = "Submitted", LoanStatusCategoryId = 1 },
                new LoanStatusEntity { Id = 2, Description = "In Review", LoanStatusCategoryId = 1 },
                new LoanStatusEntity { Id = 3, Description = "Approved", LoanStatusCategoryId = 2 },
                new LoanStatusEntity { Id = 4, Description = "Funded", LoanStatusCategoryId = 2 }
            );
        });
    }
}
```

---

## Stores

### Stores/ILookupDefinitionStore.cs

```csharp
using Shared.LookupService.Models;

namespace Shared.LookupService.Stores;

public interface ILookupDefinitionStore
{
    Task<IReadOnlyList<LookupDefinition>> GetAllAsync();
    Task RefreshAsync(string key);
    Task RefreshAllAsync();
}
```

### Stores/DbLookupDefinitionStore.cs

```csharp
using System.Text.Json;
using Microsoft.EntityFrameworkCore;
using Shared.LookupService.Models;
using Shared.LookupService.Data;

namespace Shared.LookupService.Stores;

public class DbLookupDefinitionStore : ILookupDefinitionStore
{
    private readonly MockDbContext _db;
    public DbLookupDefinitionStore(MockDbContext db) => _db = db;

    public async Task<IReadOnlyList<LookupDefinition>> GetAllAsync()
    {
        var rows = await _db.LookupDefinitions.AsNoTracking().ToListAsync();
        return rows.Select(r => new LookupDefinition {
            Key               = r.Key,
            SourceType        = LookupSourceType.Table,
            TableName         = r.TableName,
            Sql               = r.Sql,
            EntityType        = r.EntityType,
            HandlerType       = r.HandlerType,
            FilterColumns     = JsonSerializer.Deserialize<string[]>(r.FilterColumns) ?? Array.Empty<string>(),
            SortBy            = r.SortBy,
            CodeColumn        = r.CodeColumn,
            DescColumn        = r.DescColumn,
            AdditionalColumns = JsonSerializer.Deserialize<string[]>(r.AdditionalColumns) ?? Array.Empty<string>()
        }).ToList();
    }

    public Task RefreshAsync(string key) => Task.CompletedTask;
    public Task RefreshAllAsync() => Task.CompletedTask;
}
```

### Stores/JsonLookupDefinitionStore.cs

```csharp
using Microsoft.Extensions.Options;
using Shared.LookupService.Models;

namespace Shared.LookupService.Stores;

public class JsonLookupDefinitionStore : ILookupDefinitionStore
{
    private readonly IOptionsMonitor<List<LookupDefinition>> _monitor;
    public JsonLookupDefinitionStore(IOptionsMonitor<List<LookupDefinition>> monitor)
        => _monitor = monitor;

    public Task<IReadOnlyList<LookupDefinition>> GetAllAsync()
        => Task.FromResult((IReadOnlyList<LookupDefinition>)_monitor.CurrentValue);

    public Task RefreshAsync(string key) => Task.CompletedTask;
    public Task RefreshAllAsync() => Task.CompletedTask;
}
```

---

## Providers

### Providers/ILookupProvider.cs

```csharp
using Shared.LookupService.Models;

namespace Shared.LookupService.Providers;

public interface ILookupProvider
{
    Task<IEnumerable<LookupItem>> GetAsync(
        LookupDefinition def,
        IDictionary<string, object>? filters = null);
}
```

### Providers/ILookupHandler.cs

```csharp
using Shared.LookupService.Models;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace Shared.LookupService.Providers
{
    /// <summary>
    /// Defines a custom handler for complex lookup logic.
    /// </summary>
    public interface ILookupHandler
    {
        /// <summary>
        /// Execute custom logic and return code/description pairs.
        /// </summary>
        Task<IEnumerable<LookupItem>> HandleAsync(
            LookupDefinition definition,
            IDictionary<string, object>? filterValues = null
        );
    }
}
```

### Providers/ILookupProvider.cs

```csharp
using Shared.LookupService.Models;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace Shared.LookupService.Providers
{
    /// <summary>
    /// Defines the lookup provider interface for table, SQL, entity, and handler sources.
    /// </summary>
    public interface ILookupProvider
    {
        Task<IEnumerable<LookupItem>> GetAsync(
            LookupDefinition definition,
            IDictionary<string, object>? filters = null
        );
    }
}
```

### Providers/TableLookupProvider.cs

````csharp
using System;
using System.Collections.Generic;
using System.Linq;
using Dapper;
using Shared.LookupService.Models;
// Replace with your actual namespace where IDapperContext is defined
using YourApp.Data;

namespace Shared.LookupService.Providers
{
    /// <summary>
    /// Retrieves lookup items from a database table using Dapper.
    /// </summary>
    public class TableLookupProvider : ILookupProvider
    {
        private readonly IDapperContext _dapperContext;
        public TableLookupProvider(IDapperContext dapperContext) => _dapperContext = dapperContext;

        public async Task<IEnumerable<LookupItem>> GetAsync(
            LookupDefinition def,
            IDictionary<string, object>? filters = null)
        {
            if (def.SourceType != LookupSourceType.Table)
                throw new ArgumentException("SourceType must be Table", nameof(def.SourceType));
            if (string.IsNullOrWhiteSpace(def.TableName))
                throw new ArgumentException("TableName is required", nameof(def.TableName));

            var codeCol = def.CodeColumn ?? "Code";
            var descCol = def.DescColumn ?? "Description";
            var selectCols = new List<string>
            {
                $"{codeCol} AS Code",
                $"{descCol} AS Description"
            };
            if (def.AdditionalColumns?.Length > 0)
            {
                selectCols.AddRange(def.AdditionalColumns);
            }

            var sql = $"SELECT {string.Join(", ", selectCols)} FROM {def.TableName}";

            var parameters = new DynamicParameters();
            if (filters != null && filters.Count > 0)
            {
                var where = new List<string>();
                foreach (var col in def.FilterColumns)
                {
                    if (filters.ContainsKey(col))
                    {
                        where.Add($"{col}=@{col}");
                        parameters.Add(col, filters[col]);
                    }
                }
                if (where.Any())
                    sql += " WHERE " + string.Join(" AND ", where);
            }

            if (!string.IsNullOrWhiteSpace(def.SortBy))
                sql += $" ORDER BY {def.SortBy}";

            var rows = await _dapperContext.Connection.QueryAsync<dynamic>(sql, parameters);
            var result = new List<LookupItem>();

            foreach (var row in rows)
            {
                var dict = (IDictionary<string, object>)row;
                var code = dict["Code"]?.ToString() ?? string.Empty;
                var desc = dict["Description"]?.ToString() ?? string.Empty;
                Dictionary<string, object>? additional = null;
                if (def.AdditionalColumns?.Length > 0)
                {
                    additional = new Dictionary<string, object>();
                    foreach (var col in def.AdditionalColumns)
                    {
                        if (dict.ContainsKey(col))
                            additional[col] = dict[col]!;
                    }
                    if (additional.Count == 0)
                        additional = null;
                }

                result.Add(new LookupItem(code, desc, additional));
            }

            return result;
        }
    }
}
```csharp
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using Dapper;
using Shared.LookupService.Models;

namespace Shared.LookupService.Providers
{
    /// <summary>
    /// Retrieves lookup items from a database table using Dapper.
    /// </summary>
    public class TableLookupProvider : ILookupProvider
    {
        private readonly IDbConnection _db;
        public TableLookupProvider(IDbConnection db) => _db = db;

        public async Task<IEnumerable<LookupItem>> GetAsync(
            LookupDefinition def,
            IDictionary<string, object>? filters = null)
        {
            if (def.SourceType != LookupSourceType.Table)
                throw new ArgumentException("SourceType must be Table", nameof(def.SourceType));
            if (string.IsNullOrWhiteSpace(def.TableName))
                throw new ArgumentException("TableName is required", nameof(def.TableName));

            var codeCol = def.CodeColumn ?? "Code";
            var descCol = def.DescColumn ?? "Description";
            var selectCols = new List<string>
            {
                $"{codeCol} AS Code",
                $"{descCol} AS Description"
            };
            if (def.AdditionalColumns?.Length > 0)
            {
                selectCols.AddRange(def.AdditionalColumns.Select(c => c));
            }

            var sql = $"SELECT {string.Join(", ", selectCols)} FROM {def.TableName}";

            var parameters = new DynamicParameters();
            if (filters != null && filters.Count > 0)
            {
                var where = new List<string>();
                foreach (var col in def.FilterColumns)
                {
                    if (filters.ContainsKey(col))
                    {
                        where.Add($"{col}=@{col}");
                        parameters.Add(col, filters[col]);
                    }
                }
                if (where.Any())
                    sql += " WHERE " + string.Join(" AND ", where);
            }

            if (!string.IsNullOrWhiteSpace(def.SortBy))
            {
                sql += $" ORDER BY {def.SortBy}";
            }

            var rows = await _db.QueryAsync<dynamic>(sql, parameters);
            var result = new List<LookupItem>();
            foreach (var row in rows)
            {
                var dict = (IDictionary<string, object>)row;
                var code = dict["Code"]?.ToString() ?? string.Empty;
                var desc = dict["Description"]?.ToString() ?? string.Empty;
                Dictionary<string, object>? additional = null;
                if (def.AdditionalColumns?.Length > 0)
                {
                    additional = new Dictionary<string, object>();
                    foreach (var col in def.AdditionalColumns)
                    {
                        if (dict.ContainsKey(col))
                            additional[col] = dict[col]!;
                    }
                    if (additional.Count == 0)
                        additional = null;
                }

                result.Add(new LookupItem(code, desc, additional));
            }

            return result;
        }
    }
}
```csharp
using Dapper;
using Shared.LookupService.Models;
using Microsoft.EntityFrameworkCore;

using System.Data;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;

namespace Shared.LookupService.Extensions;

public static class ServiceCollectionExtensions
{
    public static IServiceCollection AddLookupDefinitions(this IServiceCollection services, IConfiguration config, string source)
    {
        services.AddMemoryCache();
        
        services.AddSingleton<TableLookupProvider>();
        services.AddSingleton<ILookupProvider, TableLookupProvider>();
        services.AddSingleton<HandlerLookupProvider>();
        services.AddSingleton<ILookupProvider, HandlerLookupProvider>();
        services.AddSingleton<ProductTypeLookupHandler>();
        services.AddSingleton<ILookupHandler, ProductTypeLookupHandler>();
        services.AddSingleton<LookupProviderFactory>();
        services.AddSingleton<LookupDataService>();
        services.AddScoped<CachingLookupDataService>();
        services.AddScoped<ILookupDataService>(sp => sp.GetRequiredService<CachingLookupDataService>());

        if (source == "Json")
        {
            services.Configure<List<LookupDefinition>>(config.GetSection("LookupDataSettings"));
            services.AddSingleton<ILookupDefinitionStore, JsonLookupDefinitionStore>();
        }
        else if (source == "Db")
        {
            services.AddDbContext<MockDbContext>(opts => opts.UseInMemoryDatabase("LookupDb"));
            services.AddScoped<ILookupDefinitionStore, DbLookupDefinitionStore>();
        }

        return services;
    }
}
````

---

# LookupApi.Common (Mock DB-backed API)

### LookupApi.Common.csproj

```xml
<Project Sdk="Microsoft.NET.Sdk.Web">
  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <Nullable>enable</Nullable>
  </PropertyGroup>
  <ItemGroup>
    <ProjectReference Include="../Shared.LookupService/Shared.LookupService.csproj" />
  </ItemGroup>
</Project>
```

### appsettings.json

```json
{
  "ConnectionStrings": { "Default": "LookupDb" },
  "Logging": { "LogLevel": { "Default": "Information" } },
  "AllowedHosts": "*"
}
```

### Program.cs

```csharp
using System.Data;
using Microsoft.Data.SqlClient;
using Shared.LookupService.Extensions;

var builder = WebApplication.CreateBuilder(args);

// Register IDbConnection for Dapper
builder.Services.AddTransient<IDbConnection>(sp =>
    new SqlConnection(builder.Configuration.GetConnectionString("Default"))
);

// Add lookup definitions store (JSON-backed)
builder.Services.AddLookupDefinitions(builder.Configuration, "Json");

var app = builder.Build();
app.MapControllers();
app.Run();
```

### Controllers/FundingController.cs

```csharp
using Microsoft.AspNetCore.Mvc;
using Shared.LookupService.Services;

namespace FundingModuleApi.Controllers;

[ApiController]
[Route("api/[controller]")]
public class FundingController : ControllerBase
{
    private readonly ILookupDataService _lookup;
    public FundingController(ILookupDataService lookup) => _lookup = lookup;

    [HttpGet("countries")]
    public async Task<IActionResult> GetCountries()
    {
        var data = await _lookup.GetAsync("Countries");
        return Ok(data);
    }
}
```
