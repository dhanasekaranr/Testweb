// ====================================================================
// Project Structure (relevant parts)
// ====================================================================
// libs/
//  ├─ core/
//  ├─ shared/
//  │    └─ lookup/
//  │         ├─ lookup.model.ts
//  │         ├─ lookup.tokens.ts
//  │         ├─ lookup.service.ts
//  │         └─ lookup-select.component.ts
//  ├─ state/
//  │    ├─ lookup/
//  │    │    ├─ lookup.models.ts
//  │    │    ├─ lookup.actions.ts
//  │    │    ├─ lookup.reducer.ts
//  │    │    ├─ lookup.selectors.ts
//  │    │    ├─ lookup.effects.ts
//  │    │    ├─ lookup.utils.ts
//  │    │    └─ lookup.state.ts
//  │    └─ index.ts
//  └─ funding/
//       ├─ src/lib/funding.module.ts
//       ├─ src/lib/funding-routing.module.ts
//       └─ src/lib/components/fund-selector.component.ts


// ====================================================================
// File: libs/state/lookup/lookup.models.ts
// ====================================================================
export interface LookupItem {
  value: string | number;
  name: string;
  additionaldata?: Record<string, any>;
  [key: string]: any;
}


// ====================================================================
// File: libs/state/lookup/lookup.actions.ts
// ====================================================================
import { createAction, props } from '@ngrx/store';
import { LookupItem } from './lookup.models';

export const loadLookup = createAction(
  '[Lookup] Load',
  props<{ name: string; uiParams?: Record<string, any> }>()
);

export const loadLookupSuccess = createAction(
  '[Lookup] Load Success',
  props<{ name: string; items: LookupItem[]; uiParamsKey: string }>()
);

export const loadLookupFailure = createAction(
  '[Lookup] Load Failure',
  props<{ name: string; error: any }>()
);


// ====================================================================
// File: libs/state/lookup/lookup.reducer.ts
// ====================================================================
import { createReducer, on } from '@ngrx/store';
import * as LookupActions from './lookup.actions';
import { LookupItem } from './lookup.models';

export const lookupFeatureKey = 'lookup';

export interface LookupState {
  entities: Record<string, Record<string, LookupItem[]>>;
  loading: boolean;
  error: any;
}

export const initialLookupState: LookupState = {
  entities: {},
  loading: false,
  error: null
};

export const lookupReducer = createReducer(
  initialLookupState,
  on(LookupActions.loadLookup, state => ({ ...state, loading: true, error: null })),
  on(LookupActions.loadLookupSuccess, (state, { name, items, uiParamsKey }) => ({
    ...state,
    loading: false,
    entities: {
      ...state.entities,
      [name]: {
        ...state.entities[name],
        [uiParamsKey]: items
      }
    }
  })),
  on(LookupActions.loadLookupFailure, (state, { error }) => ({ ...state, loading: false, error }))
);


// ====================================================================
// File: libs/state/lookup/lookup.selectors.ts
// ====================================================================
import { createFeatureSelector, createSelector } from '@ngrx/store';
import { lookupFeatureKey, LookupState } from './lookup.reducer';
import { serializeParams } from './lookup.utils';

const selectLookupFeature = createFeatureSelector<LookupState>(lookupFeatureKey);

export const selectLookupItems = (name: string, uiParams?: Record<string, any>) =>
  createSelector(
    selectLookupFeature,
    state => state.entities[name]?.[serializeParams(uiParams)] ?? []
  );

export const selectLookupLoading = createSelector(
  selectLookupFeature,
  state => state.loading
);

export const selectLookupError = createSelector(
  selectLookupFeature,
  state => state.error
);


// ====================================================================
// File: libs/state/lookup/lookup.effects.ts
// ====================================================================
import { Injectable } from '@angular/core';
import { Actions, createEffect, ofType } from '@ngrx/effects';
import { of } from 'rxjs';
import { catchError, map, mergeMap } from 'rxjs/operators';
import * as LookupActions from './lookup.actions';
import { LookupService } from '@yourorg/shared';
import { serializeParams } from './lookup.utils';

@Injectable()
export class LookupEffects {
  loadLookup$ = createEffect(() =>
    this.actions$.pipe(
      ofType(LookupActions.loadLookup),
      mergeMap(({ name, uiParams }) =>
        this.lookupService.getLookup(name, uiParams).pipe(
          map(items =>
            LookupActions.loadLookupSuccess({
              name,
              items,
              uiParamsKey: serializeParams(uiParams)
            })
          ),
          catchError(error => of(LookupActions.loadLookupFailure({ name, error })))
        )
      )
    )
  );

  constructor(private actions$: Actions, private lookupService: LookupService) {}
}


// ====================================================================
// File: libs/state/lookup/lookup.utils.ts
// ====================================================================
export function serializeParams(params?: Record<string, any>): string {
  if (!params) return '';
  return Object.keys(params)
    .sort()
    .map(k => `${k}=${JSON.stringify(params[k])}`)
    .join('&');
}


// ====================================================================
// File: libs/state/lookup/lookup.state.ts
// ====================================================================
import { NgModule } from '@angular/core';
import { StoreModule } from '@ngrx/store';
import { EffectsModule } from '@ngrx/effects';
import { lookupFeatureKey, lookupReducer } from './lookup.reducer';
import { LookupEffects } from './lookup.effects';

@NgModule({
  imports: [
    StoreModule.forFeature(lookupFeatureKey, lookupReducer),
    EffectsModule.forFeature([LookupEffects])
  ]
})
export class LookupStateModule {}


// ====================================================================
// File: libs/state/index.ts
// ====================================================================
export * from './lookup/lookup.models';
export * from './lookup/lookup.actions';
export * from './lookup/lookup.selectors';
export * from './lookup/lookup.effects';
export * from './lookup/lookup.state';


// ====================================================================
// File: libs/shared/lookup/lookup.model.ts
// ====================================================================
export interface LookupItem {
  value: string | number;
  name: string;
  additionaldata?: Record<string, any>;
  [key: string]: any;
}


// ====================================================================
// File: libs/shared/lookup/lookup.tokens.ts
// ====================================================================
import { InjectionToken } from '@angular/core';

export const LOOKUP_API_URL = new InjectionToken<string>('LookupApiUrl', {
  providedIn: 'root',
  factory: () => '/commonapi/lookup'
});


// ====================================================================
// File: libs/shared/lookup/lookup.service.ts
// ====================================================================
import { Injectable, Inject } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { Observable } from 'rxjs';
import { map, shareReplay } from 'rxjs/operators';
import { LookupItem } from './lookup.model';
import { LOOKUP_API_URL } from './lookup.tokens';

@Injectable({ providedIn: 'root' })
export class LookupService {
  private cache = new Map<string, Observable<LookupItem[]>>();

  constructor(private http: HttpClient, @Inject(LOOKUP_API_URL) private apiUrl: string) {}

  getLookup(name: string, uiParams?: Record<string, any>): Observable<LookupItem[]> {
    const key = this.buildKey(name, uiParams);
    if (!this.cache.has(key)) {
      let params = new HttpParams().set('names', name);
      if (uiParams) {
        Object.entries(uiParams).forEach(([k, v]) => {
          if (v != null) params = params.set(k, v);
        });
      }
      const req$ = this.http.get<Record<string, LookupItem[]>>(this.apiUrl, { params }).pipe(
        map(res => res[name] || []),
        shareReplay(1)
      );
      this.cache.set(key, req$);
    }
    return this.cache.get(key)!;
  }

  private buildKey(name: string, uiParams?: Record<string, any>): string {
    const p = serializeParams(uiParams);
    return p ? `${name}|${p}` : name;
  }
}


// ====================================================================
// File: libs/shared/lookup/lookup-select.component.ts
// ====================================================================
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { Store } from '@ngrx/store';
import { loadLookup } from '@yourorg/state';
import { selectLookupItems } from '@yourorg/state';
import { Observable } from 'rxjs';

@Component({
  selector: 'app-lookup-select',
  template: `
    <mat-form-field appearance="fill">
      <mat-label>{{ placeholder }}</mat-label>
      <mat-select
        [value]="selected"
        (openedChange)="onOpen()"
        (selectionChange)="onSelect($event.value)"
        [multiple]="multiple">
        <mat-option *ngFor="let item of items$ | async" [value]="item.value">
          {{ item.name }}
        </mat-option>
      </mat-select>
    </mat-form-field>
  `
})
export class LookupSelectComponent {
  @Input() lookupName!: string;
  @Input() uiParams?: Record<string, any>;
  @Input() placeholder = 'Select';
  @Input() multiple = false;
  @Input() selected: any;
  @Output() selectedChange = new EventEmitter<any>();

  items$!: Observable<any[]>;

  constructor(private store: Store) {}

  onOpen() {
    if (this.lookupName) {
      this.store.dispatch(loadLookup({ name: this.lookupName, uiParams: this.uiParams }));
      this.items$ = this.store.select(selectLookupItems(this.lookupName, this.uiParams));
    }
  }

  onSelect(val: any) {
    this.selectedChange.emit(val);
  }
}


// ====================================================================
// File: libs/funding/src/lib/funding.module.ts
// ====================================================================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FundingRoutingModule } from './funding-routing.module';
import { SharedModule } from '@yourorg/shared';
import { LookupStateModule } from '@yourorg/state';
import { FundSelectorComponent } from './components/fund-selector.component';

@NgModule({
  declarations: [FundSelectorComponent],
  imports: [
    CommonModule,
    FundingRoutingModule,
    SharedModule,
    LookupStateModule  // brings in lookup reducer & effects
  ]
})
export class FundingModule {}


// ====================================================================
// File: libs/funding/src/lib/components/fund-selector.component.ts
// ====================================================================
import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';
import { Store } from '@ngrx/store';
import { loadLookup, selectLookupItems } from '@yourorg/state';
import { Observable } from 'rxjs';
import { LookupItem } from '@yourorg/shared';

@Component({
  selector: 'app-fund-selector',
  template: `
    <app-lookup-select
      [lookupName]="'funds'"
      [placeholder]="placeholder"
      [selected]="selected"
      (selectedChange)="onSelect($event)">
    </app-lookup-select>
  `
})
export class FundSelectorComponent implements OnInit {
  @Input() selected?: any;
  @Input() placeholder = 'Select Fund';
  @Output() selectedChange = new EventEmitter<any>();

  constructor(private store: Store) {}

  ngOnInit() {}

  onSelect(val: any) {
    this.selectedChange.emit(val);
  }
}


// ====================================================================
// File: libs/funding/src/lib/funding-routing.module.ts
// ====================================================================
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { FundSelectorComponent } from './components/fund-selector.component';

const routes: Routes = [
  { path: '', component: FundSelectorComponent }
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class FundingRoutingModule {}
