# üåç **Environment-Controlled DevTools for Signal Stores**

## üéØ **Perfect Solution for Your 100+ Stores**

Instead of using `isDevMode()`, you now have **environment-based control** over Redux DevTools!

## ‚öôÔ∏è **Environment Configuration**

### **Development Environment** (`environment.ts`)
```typescript
devTools: {
  enableReduxDevTools: true,        // üü¢ DevTools ON
  enableConsoleDebugging: true,     // üü¢ Console logs ON  
  enablePerformanceTracking: true,  // üü¢ Performance ON
  enableStateExport: true,          // üü¢ State export ON
  storesToDebug: ['*'],             // üü¢ Debug ALL stores
  maxHistorySize: 50,               // üü¢ Keep 50 actions
}
```

### **Production Environment** (`environment.prod.ts`)
```typescript
devTools: {
  enableReduxDevTools: false,       // üî¥ DevTools OFF
  enableConsoleDebugging: false,   // üî¥ No console logs
  enablePerformanceTracking: false, // üî¥ No performance tracking  
  enableStateExport: false,        // üî¥ No state export
  storesToDebug: [],               // üî¥ No debugging
  maxHistorySize: 0,               // üî¥ No history
}
```

## üéÆ **Advanced Environment Controls**

### **Staging Environment** (Optional)
```typescript
// environment.staging.ts
devTools: {
  enableReduxDevTools: true,        // ‚úÖ Enable for testing
  enableConsoleDebugging: false,   // ‚ùå But no console spam
  enablePerformanceTracking: true,  // ‚úÖ Monitor performance
  enableStateExport: true,          // ‚úÖ Allow bug reporting
  storesToDebug: ['UsersStore', 'OrdersStore'], // üéØ Only specific stores
  maxHistorySize: 25,               // üîÑ Smaller history
}
```

### **Demo Environment** (Optional)
```typescript
// environment.demo.ts  
devTools: {
  enableReduxDevTools: true,        // ‚úÖ Show to clients
  enableConsoleDebugging: true,    // ‚úÖ Explain what's happening
  enablePerformanceTracking: false, // ‚ùå Don't distract
  enableStateExport: false,        // ‚ùå Prevent data export
  storesToDebug: ['DashboardStore'], // üéØ Only main features
  maxHistorySize: 10,              // üîÑ Keep it simple
}
```

## üè™ **Store Implementation**

### **Basic Store Template**
```typescript
import { withConditionalDevTools } from '../../../shared/features/environment-devtools.feature';

export const MyStore = signalStore(
  { providedIn: 'root' },
  withState(initialState),
  withComputed(/* ... */),
  withMethods(/* ... */),
  
  // üéØ ONE LINE - Environment controlled!
  withConditionalDevTools('MyStoreName')
);
```

### **What Happens in Each Environment:**

#### **Development** üü¢
```typescript
withConditionalDevTools('UsersStore')
// ‚úÖ Redux DevTools connected
// ‚úÖ Console: "üè™ UsersStore (development) initialized"
// ‚úÖ Console: "üîó UsersStore (development) connected to Redux DevTools"
// ‚úÖ Full debugging capabilities
```

#### **Production** üî¥
```typescript
withConditionalDevTools('UsersStore')  
// ‚ùå No DevTools connection
// ‚ùå No console output
// ‚ùå Zero debugging overhead
// ‚úÖ Clean production bundle
```

#### **Staging** üü°
```typescript
withConditionalDevTools('UsersStore')
// ‚úÖ Redux DevTools connected (if in storesToDebug)
// ‚ùå No console spam
// ‚úÖ Performance monitoring
// ‚úÖ Bug reporting capabilities
```

## üéõÔ∏è **Environment Service API**

Your environment service provides these methods:

```typescript
const envService = inject(EnvironmentService);

// Check if DevTools are enabled
envService.isReduxDevToolsEnabled          // true/false
envService.isConsoleDebuggingEnabled       // true/false
envService.isPerformanceTrackingEnabled    // true/false

// Check specific store
envService.shouldDebugStore('UsersStore')  // true/false

// Get full config for a store
const config = envService.getDevToolsConfig('UsersStore');
/* Returns:
{
  enabled: true,
  console: true,
  performance: true,
  stateExport: true,
  maxHistory: 50,
  name: "UsersStore (development)"
}
*/
```

## üöÄ **Apply to All Your Stores**

### **Step 1: Add Import**
```typescript
import { withConditionalDevTools } from '../../../shared/features/environment-devtools.feature';
```

### **Step 2: Add to Store**
```typescript
export const MyStore = signalStore(
  // ... existing code ...
  withConditionalDevTools('MyStoreName') // üéØ Last line
);
```

### **Step 3: Customize Environment** (Optional)
```typescript
// Fine-tune which stores debug in which environments
devTools: {
  storesToDebug: [
    'UsersStore',
    'OrdersStore', 
    'PaymentStore'
  ]  // Only these stores have debugging
}
```

## üåü **Benefits Over isDevMode()**

### ‚úÖ **Fine-Grained Control**
```typescript
// ‚ùå Old way: All or nothing
if (isDevMode()) { /* debug everything */ }

// ‚úÖ New way: Precise control
devTools: {
  storesToDebug: ['CriticalStore', 'ImportantStore']  // Only what you need
}
```

### ‚úÖ **Environment-Specific Debugging**
```typescript
// ‚úÖ Development: Full debugging
// ‚úÖ Staging: Selected stores only  
// ‚úÖ Demo: Show-and-tell mode
// ‚úÖ Production: Complete silence
```

### ‚úÖ **Runtime Configuration**
```typescript
// Can be changed via environment variables
process.env.ENABLE_STORE_DEBUGGING = 'true'
process.env.STORES_TO_DEBUG = 'UsersStore,OrdersStore'
```

### ‚úÖ **Better Performance**
```typescript
// Only enabled stores get debugging overhead
// Production builds have zero debugging code
// Selective debugging reduces noise
```

## üéÆ **Browser Usage**

1. **Development**: All stores appear in Redux DevTools
2. **Staging**: Only specified stores appear  
3. **Production**: Redux tab shows "No store found" (as expected)

## üìä **Console Output Examples**

### **Development Environment:**
```
üè™ UsersStore (development) initialized (environment-controlled)
üîó UsersStore (development) connected to Redux DevTools
üè™ SettingsStore (development) initialized (environment-controlled)  
üîó SettingsStore (development) connected to Redux DevTools
```

### **Staging Environment:**
```
üè™ UsersStore (staging) initialized (environment-controlled)
üîó UsersStore (staging) connected to Redux DevTools
// SettingsStore not debugged (not in storesToDebug array)
```

### **Production Environment:**
```
// Complete silence - no console output
```

---

## üéØ **Summary**

You now have **enterprise-grade control** over your Signal Store debugging:

- ‚úÖ **Environment-based**: Different configs per environment
- ‚úÖ **Granular**: Choose exactly which stores to debug
- ‚úÖ **Performance-aware**: Zero overhead in production
- ‚úÖ **Scalable**: Works perfectly for 100+ stores
- ‚úÖ **Maintainable**: Change config, not code

**One line per store, full environment control!** üöÄ



  // Development Tools Configuration
  devTools: {
    enableReduxDevTools: true,        // üéØ Redux DevTools for Signal Stores
    enableConsoleDebugging: true,     // Console logging for stores
    enablePerformanceTracking: true,  // Performance monitoring
    enableStateExport: true,          // Allow state export/import
    storesToDebug: ['*'],             // '*' for all stores, or specific: ['UsersStore', 'SettingsStore']
    maxHistorySize: 50,               // Max actions to keep in DevTools
  },

  devTools: {
    enableReduxDevTools: false,       // üö´ No DevTools in production
    enableConsoleDebugging: false,   // No console logging
    enablePerformanceTracking: false, // No performance tracking
    enableStateExport: false,        // No state export/import
    storesToDebug: [],               // No stores to debug
    maxHistorySize: 0,               // No history
  },







import { inject } from '@angular/core';
import { withDevtools } from '@angular-architects/ngrx-toolkit';
import { withHooks } from '@ngrx/signals';
import { EnvironmentService } from '../../core/services/environment.service';

/**
 * Environment-aware DevTools feature for Signal Stores
 * Uses environment configuration instead of isDevMode()
 * 
 * Usage:
 * export const MyStore = signalStore(
 *   { providedIn: 'root' },
 *   withState(initialState),
 *   withComputed(...),
 *   withMethods(...),
 *   withEnvironmentDevTools('MyStoreName') // üéØ Environment-controlled debugging!
 * );
 */
export function withEnvironmentDevTools(storeName: string) {
  return [
    // Conditionally apply DevTools based on environment
    ...((() => {
      const envService = inject(EnvironmentService);
      const config = envService.getDevToolsConfig(storeName);
      
      if (!config.enabled) {
        return []; // No debugging in this environment
      }
      
      return [
        // Apply NgRx Toolkit DevTools
        withDevtools(storeName),
        
        // Add environment-aware debugging hooks
        withHooks((storeInstance: any) => ({
          onInit() {
            if (config.console) {
              console.log(`üè™ ${config.name} initialized with environment-controlled debugging`);
              console.log(`üîß Config:`, config);
            }
            
            // Performance tracking if enabled
            if (config.performance) {
              console.time(`${storeName} initialization`);
              console.timeEnd(`${storeName} initialization`);
            }
            
            // Manual Redux DevTools connection with environment-specific settings
            if (typeof window !== 'undefined' && (window as any).__REDUX_DEVTOOLS_EXTENSION__) {
              try {
                const devtools = (window as any).__REDUX_DEVTOOLS_EXTENSION__.connect({
                  name: config.name,
                  instanceId: `${storeName.toLowerCase()}-env`,
                  maxAge: config.maxHistory,
                  features: {
                    pause: true,
                    lock: true,
                    persist: config.stateExport,
                    export: config.stateExport,
                    import: config.stateExport,
                    jump: true,
                    skip: true,
                    reorder: true,
                    dispatch: true,
                    test: true
                  }
                });
                
                // Get current state dynamically
                const currentState: Record<string, any> = {};
                
                // Extract all state properties safely
                Object.keys(storeInstance).forEach(key => {
                  if (typeof storeInstance[key] === 'function') {
                    try {
                      const value = storeInstance[key]();
                      if (typeof value !== 'function') {
                        currentState[key] = value;
                      }
                    } catch (e) {
                      // Skip properties that can't be called
                    }
                  }
                });
                
                devtools.init(currentState);
                
                if (config.console) {
                  console.log(`üîó ${config.name} connected to Redux DevTools`);
                }
              } catch (error) {
                if (config.console) {
                  console.warn(`‚ö†Ô∏è ${config.name} DevTools connection failed:`, error);
                }
              }
            } else if (config.console) {
              console.warn(`‚ö†Ô∏è ${config.name}: Redux DevTools extension not found`);
            }
          },
          
          onDestroy() {
            if (config.console) {
              console.log(`üè™ ${config.name} destroyed`);
            }
          }
        }))
      ];
    })())
  ];
}

/**
 * Simplified version that only applies DevTools if enabled in environment
 */
export function withConditionalDevTools(storeName: string) {
  return withHooks((store) => {
    const envService = inject(EnvironmentService);
    
    return {
      onInit() {
        if (envService.shouldDebugStore(storeName)) {
          const config = envService.getDevToolsConfig(storeName);
          
          if (config.console) {
            console.log(`üè™ ${config.name} initialized (environment-controlled)`);
          }
          
          // Manual Redux DevTools connection
          if (typeof window !== 'undefined' && (window as any).__REDUX_DEVTOOLS_EXTENSION__) {
            try {
              const devtools = (window as any).__REDUX_DEVTOOLS_EXTENSION__.connect({
                name: config.name,
                instanceId: `${storeName.toLowerCase()}-env`,
                maxAge: config.maxHistory
              });
              
              // Get current state dynamically
              const currentState: Record<string, any> = {};
              Object.keys(store).forEach(key => {
                if (typeof store[key] === 'function') {
                  try {
                    const value = store[key]();
                    if (typeof value !== 'function') {
                      currentState[key] = value;
                    }
                  } catch (e) {
                    // Skip properties that can't be called
                  }
                }
              });
              
              devtools.init(currentState);
              
              if (config.console) {
                console.log(`üîó ${config.name} connected to Redux DevTools`);
              }
            } catch (error) {
              if (config.console) {
                console.warn(`‚ö†Ô∏è ${config.name} DevTools connection failed:`, error);
              }
            }
          }
        }
      }
    };
  });
}

/**
 * Get environment-specific DevTools configuration
 */
export function getDevToolsConfig(storeName: string) {
  const envService = inject(EnvironmentService);
  return envService.getDevToolsConfig(storeName);
}







------------------------------


// üéØ Environment-controlled Redux DevTools
  withConditionalDevTools('UsersStore')
