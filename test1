// src/app/devtools/with-devtools-auto.feature.ts
import { effect, inject } from '@angular/core';
import {
  signalStoreFeature,
  withHooks,
  withMethods,
  type SignalStoreFeature,
} from '@ngrx/signals';
import { ReduxDevtoolsService } from './redux-devtools.service';

const safe = <T>(v: T): T => { try { return JSON.parse(JSON.stringify(v)); } catch { return v; } };
const stableStr = (v: unknown) => { try { return JSON.stringify(v); } catch { return String(v); } };

export type DevtoolsAutoFeature = {
  /** Optional helper to push the current snapshot into DevTools on demand */
  syncNow: () => void;
};

/**
 * Auto-instruments a SignalStore for Redux DevTools.
 * - No client audit.
 * - Only uses public NgRx feature helpers (withHooks/withMethods), so types match.
 */
export function withDevtoolsAuto<State extends object>(
  name: string,
  initial: State,
): SignalStoreFeature {
  // These live in the feature closure and get initialized in onInit:
  let readSnapshot: () => State;
  let devtools: { init: (s: unknown) => void; send: (a: any, s: unknown) => void } | null = null;
  let prevStr = '';

  return signalStoreFeature(
    withHooks({
      onInit(store) {
        // connect (no-op if disabled by env/production inside the service)
        const conn = inject(ReduxDevtoolsService).connect(name);
        devtools = conn;

        // compute which top-level keys to read from the store (based on initial)
        const keys = Object.keys(initial) as (keyof State)[];

        // snapshot reader: calls signals (functions) to get raw values
        readSnapshot = () => {
          const out: any = {};
          for (const k of keys) {
            const v: any = (store as any)[k];
            out[k as string] = typeof v === 'function' ? v() : v;
          }
          return safe(out);
        };

        const initSnap = readSnapshot();
        devtools.init(initSnap);
        prevStr = stableStr(initSnap);

        // Watch for top-level changes and send to DevTools
        effect(() => {
          const curr = readSnapshot();
          const currStr = stableStr(curr);
          if (currStr !== prevStr) {
            devtools!.send({ type: '@@change' }, curr);
            prevStr = currStr;
          }
        });
      },
    }),

    withMethods<DevtoolsAutoFeature>(() => ({
      syncNow() {
        if (devtools && readSnapshot) {
          devtools.send({ type: '@@sync' }, readSnapshot());
        }
      },
    })),
  );
}
