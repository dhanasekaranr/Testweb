// ===============================
// monitoring.service.ts
// ===============================
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { AuthService } from './auth.service';
import { v4 as uuidv4 } from 'uuid';
import { environment } from '../environments/environment';

export enum MonitoringEventType {
  Login = 'LOGIN',
  Logout = 'LOGOUT',
  ConfidentialView = 'VIEW_CONFIDENTIAL',
  UnauthorizedAccess = 'UNAUTHORIZED_ACCESS'
}

export interface UserActivityEventPayload {
  id: string;
  type: 'userActivityEvent';
  dateTime: string;
  timeZone: string;
  ait: string;
  application: string;
  action: string;
  result: '1' | '0';
  resource: string;
  resourceHost: string;
  resourceType: string;
  device: string;
  authenticationMethod: 'SSO';
  username: string;
}

@Injectable({ providedIn: 'root' })
export class MonitoringService {
  private endpoint = '/api/monitor/log';

  private readonly staticFields = {
    type: 'userActivityEvent' as const,
    application: environment.monitoring.application,
    authenticationMethod: environment.monitoring.authenticationMethod,
    resourceHost: environment.monitoring.resourceHost,
    timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone,
    device: navigator.userAgent
  };

  constructor(private http: HttpClient, private authService: AuthService) {}

  private buildPayload(action: string, result: '1' | '0', resource: string, resourceType: string): UserActivityEventPayload {
    return {
      id: uuidv4(),
      dateTime: new Date().toISOString(),
      ait: this.authService.getClientId(),
      username: this.authService.getUsername(),
      action,
      result,
      resource,
      resourceType,
      ...this.staticFields
    };
  }

  private send(action: string, result: '1' | '0', resource: string, resourceType: string): void {
    const payload = this.buildPayload(action, result, resource, resourceType);

    const headers = new HttpHeaders({
      Authorization: `Bearer ${this.authService.getToken()}`
    });

    this.http.post(this.endpoint, payload, { headers }).subscribe({
      next: () => {},
      error: () => console.warn('⚠️ Monitoring log failed.')
    });
  }

  logEvent(type: MonitoringEventType, details: any = {}) {
    const action = type;
    const result: '1' | '0' = '1';
    const resource = details.route || details.url || 'unknown';
    const resourceType = details.field || 'page';
    this.send(action, result, resource, resourceType);
  }

  logConfidentialFieldViewed(fieldName: string, context?: string): void {
    this.send(MonitoringEventType.ConfidentialView, '1', context || 'unknown', fieldName);
  }
}

// ===============================
// monitoring.service.spec.ts
// ===============================
import { TestBed } from '@angular/core/testing';
import { MonitoringService, MonitoringEventType } from './monitoring.service';
import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';
import { AuthService } from './auth.service';

const mockAuthService = {
  getToken: () => 'mock-token',
  getUsername: () => 'mock-user',
  getClientId: () => 'mock-client-id'
};

describe('MonitoringService', () => {
  let service: MonitoringService;
  let httpMock: HttpTestingController;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [HttpClientTestingModule],
      providers: [
        MonitoringService,
        { provide: AuthService, useValue: mockAuthService }
      ]
    });

    service = TestBed.inject(MonitoringService);
    httpMock = TestBed.inject(HttpTestingController);
  });

  afterEach(() => {
    httpMock.verify();
  });

  it('should send a login event', () => {
    service.logEvent(MonitoringEventType.Login, { route: 'login' });

    const req = httpMock.expectOne('/api/monitor/log');
    expect(req.request.method).toBe('POST');
    expect(req.request.headers.get('Authorization')).toBe('Bearer mock-token');
    expect(req.request.body).toMatchObject({
      type: 'userActivityEvent',
      action: 'LOGIN',
      resource: 'login',
      resourceType: 'page',
      username: 'mock-user',
      ait: 'mock-client-id',
      authenticationMethod: 'SSO'
    });

    req.flush({});
  });

  it('should send a confidential field view event', () => {
    service.logConfidentialFieldViewed('SSN', 'MyComponent');

    const req = httpMock.expectOne('/api/monitor/log');
    expect(req.request.method).toBe('POST');
    expect(req.request.body.action).toBe('VIEW_CONFIDENTIAL');
    expect(req.request.body.resource).toBe('MyComponent');
    expect(req.request.body.resourceType).toBe('SSN');

    req.flush({});
  });

  it('should handle unknown resource defaults', () => {
    service.logEvent(MonitoringEventType.Logout);

    const req = httpMock.expectOne('/api/monitor/log');
    expect(req.request.body.resource).toBe('unknown');
    expect(req.request.body.resourceType).toBe('page');

    req.flush({});
  });
});
